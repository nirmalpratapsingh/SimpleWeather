{"version":3,"sources":["store/weatherReducer/actionTypes.js","helpers/fetchData.js","helpers/getArrOfHours.js","store/weatherReducer/weatherReducer.js","store/favoriteCitiesReducer/actionTypes.js","store/favoriteCitiesReducer/favoriteCitiesReducer.js","store/store.js","historyVar.js","components/UI/IconBackButton.js","components/CitiesPageBackButton.js","icons-sprites/day-sprites.svg","icons-sprites/night-sprites.svg","components/WeatherIcon.js","components/CitiesList.js","components/TempScaleToggle.js","pages/CitiesPage.js","components/UI/FavoriteButton.js","components/FavoriteCityButton.js","components/UI/ListButton.js","helpers/useDebounce.js","components/CitySearch.js","components/UI/OutlinedButton.js","components/ForecastPageButtonLink.js","components/WeatherTempScale.js","components/WeatherCondition.js","components/CurrentForecast.js","pages/CityPage.js","components/ForecastPageBackButton.js","components/ForecastSwiper.js","components/ForecastToggle.js","pages/ForecastPage.js","pages/SearchPage.js","App.js","index.js"],"names":["SET_CITY","SET_WEATHER","CHANGE_TEMP_SCALE","SET_HOURLY_FORECAST","CHANGE_FORECAST_MODE","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","location","days","response","data","wrap","_context","prev","next","console","log","process","REACT_APP_API_KEY","fetch","concat","sent","json","abrupt","t0","error","stop","_x","_x2","apply","arguments","getArrOfHours","currentDay","nextDay","localtime","borderingPoint","hours","currentHour","low","high","length","mid","Math","floor","hour","moment","time","format","binarySearch","slice","setCity","city","type","payload","setWeather","changeTempScale","changeForecastMod","setHourlyForecast","map","temp_c","temp_f","isDay","is_day","code","condition","isRain","will_it_rain","initialState","responseLocation","country","wind","pressure","humidity","tempScale","hourlyForecast","threeDayForecast","forecastMod","localTime","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","GET_CITIES","UPDATE_TEMP","updateTemp","citiesState","arrOfCities","addToFavorites","dispatch","store","addCity","removeFromFavorites","removeCity","composedEnhancer","composeWithDevTools","applyMiddleware","thunkMiddleware","rootReducer","combineReducers","cities","state","undefined","action","_objectSpread","_toConsumableArray","lastUpdated","filter","obj","name","toLowerCase","current","toFixed","Date","now","weatherData","text","wind_kph","pressure_mb","forecast","forecastday","day","date","avgtemp_c","avgtemp_f","createStore","history","createBrowserHistory","IconBackButton","props","_jsx","IconButton","size","children","ArrowBackIcon","fontSize","CitiesPageBackButton","Link","to","className","sx","color","backgroundColor","WeatherIcon","_objectWithoutProperties","_excluded","hrefToIcon","night","style","xmlns","xmlnsXlink","href","connect","updateCityInStore","router","useHistory","_jsxs","onClick","push","fill","value","localStorage","getItem","setItem","_useState","useState","_useState2","_slicedToArray","setValue","ToggleButtonGroup","exclusive","fullWidth","borderColor","textTransform","height","onChange","ToggleButton","borderRadius","fetchCityTemp","currentDate","useEffect","forEach","JSON","stringify","CitiesList","TempScaleToggle","FavoriteButton","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","objOfCity","find","isFavorite","setFavorite","_useState3","_useState4","isDisabled","setDisabled","disabled","checked","ListButton","FormatListBulletedIcon","useDebounce","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","favoriteCities","event","target","debouncedLocation","trim","memoLoadWeather","useCallback","fetchWeather","AutosizeInput","minWidth","inputStyle","fontWeight","display","e","OutlinedButton","Button","variant","ForecastPageButtonLink","marginTop","boxShadow","windToMPS","pressureToMmOfMercury","WeatherCondition","WeatherTempScale","params","useParams","FavoriteCityButton","CitySearch","CurrentForecast","ForecastPageBackButton","SwiperCore","use","Pagination","Swiper","slidesPerView","pagination","SwiperSlide","calendar","sameDay","nextWeek","_props$hourlyForecast","_toArray","restHours","Redirect","paddingTop","borderTop","ForecastSwiper","ForecastToggle","App","Router","Switch","Route","exact","path","SearchPage","CitiesPage","CityPage","ForecastPage","citiesStr","parse","theme","createTheme","palette","primary","main","darker","secondary","rootElement","document","getElementById","ReactDOM","render","Provider","ThemeProvider","BrowserRouter","basename"],"mappings":"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","file":"static/js/main.26fd3fa0.chunk.js","sourcesContent":["export const SET_CITY = 'SET_CITY';\r\nexport const SET_WEATHER = 'SET_WEATHER';\r\nexport const CHANGE_TEMP_SCALE = 'CHANGE_TEMP_SCALE';\r\nexport const SET_HOURLY_FORECAST = 'SET_HOURLY_FORECAST';\r\nexport const CHANGE_FORECAST_MODE = 'CHANGE_FORECAST_MODE';","const fetchData = async (location, days) => {\r\n    try {\r\n        console.log(process.env.REACT_APP_API_KEY);\r\n        const response = await fetch(`https://api.weatherapi.com/v1/forecast.json?key=0f2c50e27cf144fa8c9160825232707&q=${location}&days=${days}&aqi=no&alerts=no`);\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nexport default fetchData;","import moment from \"moment\";\r\n\r\nconst getArrOfHours = (currentDay, nextDay, localtime) => {\r\n    // In case there are more than a million hours in one day( It's a joke. Just practiced binary search ).\r\n    const binarySearch = (hours, currentHour) => {\r\n        let low = 0;\r\n        let high = hours.length - 1;\r\n\r\n        while(low <= high) {\r\n            const mid = Math.floor((low + high) / 2);\r\n            const hour = moment(hours[mid].time, 'YYYY-MM-DD hh:mm').format('HH');\r\n            if(hour === currentHour) {\r\n                return mid;\r\n            }\r\n            if(hour > currentHour) {\r\n                high = mid - 1;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n    }\r\n    const borderingPoint = binarySearch(currentDay, moment(localtime, 'YYYY-MM-DD HH:mm').format('HH'));\r\n    // create new array of Hours since current hour\r\n    return currentDay.slice(borderingPoint).concat(nextDay.slice(0, borderingPoint));\r\n}\r\n\r\nexport default getArrOfHours;","import store from \"../store\";\r\nimport {\r\n    CHANGE_FORECAST_MODE,\r\n    CHANGE_TEMP_SCALE,\r\n    SET_CITY,\r\n    SET_HOURLY_FORECAST,\r\n    SET_WEATHER\r\n} from \"./actionTypes\";\r\nimport fetchData from \"../../helpers/fetchData\";\r\nimport getArrOfHours from \"../../helpers/getArrOfHours\";\r\n\r\nexport const setCity = (city) => ({type: SET_CITY, payload: city})\r\nexport const setWeather = (response) => ({type: SET_WEATHER, payload: response})\r\nexport const changeTempScale = (response) => ({type: CHANGE_TEMP_SCALE, payload: response})\r\nexport const changeForecastMod = (response) => ({type: CHANGE_FORECAST_MODE, payload: response})\r\nexport const setHourlyForecast = (response) => ({\r\n    type: SET_HOURLY_FORECAST, payload: response.map((hour) => {\r\n        return {\r\n            temp_c: hour.temp_c,\r\n            temp_f: hour.temp_f,\r\n            hour: hour.time,\r\n            isDay: hour.is_day,\r\n            code: hour.condition.code,\r\n            isRain: hour.will_it_rain\r\n        };\r\n    })\r\n})\r\n\r\nexport const initialState = {\r\n    location: '',\r\n    responseLocation: '',\r\n    country: '',\r\n    temp_c: '',\r\n    temp_f: '',\r\n    condition: '',\r\n    wind: '',\r\n    pressure: '',\r\n    humidity: '',\r\n    code: '',\r\n    isDay: '',\r\n    tempScale: 'celsius',\r\n    hourlyForecast: [],\r\n    threeDayForecast: [],\r\n    forecastMod: 'threeDay',\r\n    localTime: ''\r\n};\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CITY:\r\n            return {...state, location: action.payload.toLowerCase()};\r\n        case SET_WEATHER:\r\n            return {\r\n                ...state,\r\n                responseLocation: action.payload.location.name,\r\n                country: action.payload.location.country,\r\n                temp_c: action.payload.current.temp_c.toFixed(),\r\n                temp_f: action.payload.current.temp_f.toFixed(),\r\n                condition: action.payload.current.condition.text.toLowerCase(),\r\n                wind: action.payload.current.wind_kph,\r\n                pressure: action.payload.current.pressure_mb,\r\n                humidity: action.payload.current.humidity,\r\n                code: action.payload.current.condition.code,\r\n                isDay: action.payload.current.is_day,\r\n                threeDayForecast: action.payload.forecast.forecastday.map((day) => {\r\n                    return {\r\n                        date: day.date,\r\n                        temp_c: day.day.avgtemp_c,\r\n                        temp_f: day.day.avgtemp_f,\r\n                        isDay: '1',\r\n                        code: day.day.condition.code,\r\n                        condition: day.day.condition.text.toLowerCase()\r\n                    }\r\n                }),\r\n                localTime: action.payload.location.localtime\r\n            };\r\n        case SET_HOURLY_FORECAST:\r\n            return {\r\n                ...state,\r\n                hourlyForecast: action.payload\r\n            }\r\n        case CHANGE_TEMP_SCALE:\r\n            return {\r\n                ...state,\r\n                tempScale: action.payload\r\n            };\r\n        case CHANGE_FORECAST_MODE:\r\n            return {\r\n                ...state,\r\n                forecastMod: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// This API on the free plan provides a maximum of a three-day forecast\r\nexport const fetchWeather = (debouncedLocation, days = 3) => async () => {\r\n    try {\r\n        const data = await (fetchData(debouncedLocation, days));\r\n        store.dispatch(setWeather(data));\r\n        const hourlyForecast = getArrOfHours(data.forecast.forecastday[0].hour, data.forecast.forecastday[1].hour, data.location.localtime);\r\n        store.dispatch(setHourlyForecast(hourlyForecast));\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}","export const ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\";\r\nexport const REMOVE_FROM_FAVORITES = \"REMOVE_FROM_FAVORITES\";\r\nexport const GET_CITIES = \"GET_CITIES\";\r\nexport const UPDATE_TEMP = \"UPDATE_TEMP\";","import store from \"../store\";\r\nimport {ADD_TO_FAVORITES, GET_CITIES, REMOVE_FROM_FAVORITES, UPDATE_TEMP} from \"./actionTypes\";\r\nimport fetchData from \"../../helpers/fetchData\";\r\n\r\nexport const addCity = (city) => ({type: ADD_TO_FAVORITES, payload: city})\r\nexport const removeCity = (city) => ({type: REMOVE_FROM_FAVORITES, payload: city})\r\nexport const getCitiesFromLocaleStorage = (cities) => ({type: GET_CITIES, payload: cities})\r\nexport const updateTemp = (data) => ({type: UPDATE_TEMP, payload: data})\r\n\r\nexport const citiesState = {\r\n    arrOfCities: [],\r\n};\r\n\r\nexport function favoriteCitiesReducer(state = citiesState, action) {\r\n    switch (action.type) {\r\n        case ADD_TO_FAVORITES:\r\n            return {\r\n                ...state,\r\n                arrOfCities: [...state.arrOfCities, {\r\n                    city: action.payload.city,\r\n                    temp_c: action.payload.temp_c,\r\n                    temp_f: action.payload.temp_f,\r\n                    lastUpdated: action.payload.lastUpdated,\r\n                    isDay: action.payload.isDay,\r\n                    code: action.payload.code\r\n                }]\r\n            };\r\n        case REMOVE_FROM_FAVORITES:\r\n            return {\r\n                ...state,\r\n                arrOfCities: state.arrOfCities.filter(\r\n                    (obj) => obj.city !== action.payload\r\n                ),\r\n            };\r\n        case GET_CITIES:\r\n            return {\r\n                ...state,\r\n                arrOfCities: action.payload,\r\n            };\r\n        case UPDATE_TEMP:\r\n            return {\r\n                ...state,\r\n                arrOfCities: state.arrOfCities.map((obj) => obj.city === action.payload.location.name.toLowerCase() ? {\r\n                    ...obj, temp_c: action.payload.current.temp_c.toFixed(),\r\n                    temp_f: action.payload.current.temp_f.toFixed(),\r\n                    lastUpdated: Date.now(),\r\n                    isDay: action.payload.current.is_day,\r\n                    code: action.payload.current.condition.code\r\n                } : obj)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addToFavorites = (city) => (dispatch) => {\r\n    store.dispatch(addCity(city));\r\n};\r\nexport const removeFromFavorites = (city) => (dispatch) => {\r\n    store.dispatch(removeCity(city));\r\n};\r\n\r\nexport const fetchCityTemp = (city) => async (dispatch) => {\r\n    try {\r\n        const data = await (fetchData(city));\r\n        store.dispatch(updateTemp(data));\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport {weatherReducer} from \"./weatherReducer/weatherReducer\";\r\nimport {favoriteCitiesReducer} from \"./favoriteCitiesReducer/favoriteCitiesReducer\";\r\n\r\nconst composedEnhancer = composeWithDevTools(applyMiddleware(thunkMiddleware))\r\n\r\nconst rootReducer = combineReducers({\r\n    cities: favoriteCitiesReducer,\r\n    weatherData: weatherReducer\r\n})\r\n\r\nlet store = createStore(rootReducer, composedEnhancer);\r\nexport default store;","import {createBrowserHistory} from 'history';\r\n\r\nexport const history = createBrowserHistory();\r\n","import React from 'react';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport {IconButton} from \"@mui/material\";\r\n\r\nconst IconBackButton = (props) => {\r\n    return (\r\n        <IconButton size='large' {...props}>\r\n            <ArrowBackIcon fontSize='large'/>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default IconBackButton;","import React from \"react\";\r\nimport IconBackButton from \"./UI/IconBackButton\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst CitiesPageBackButton = () => {\r\n    return (\r\n        <Link to='/SimpleWeather' className='cities-page__back-btn'>\r\n            <IconBackButton\r\n                sx={{color: '#2D81FF', '&.MuiIconButton-root:hover': {backgroundColor: 'rgba(45, 129, 255, 0.02)'}}}/>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default CitiesPageBackButton;\r\n","export default __webpack_public_path__ + \"static/media/day-sprites.c832647d.svg\";","export default __webpack_public_path__ + \"static/media/night-sprites.9e480c26.svg\";","import React from 'react';\r\nimport \"../styles/CurrentForecast.css\";\r\nimport day from '../icons-sprites/day-sprites.svg';\r\nimport night from '../icons-sprites/night-sprites.svg';\r\n\r\nconst WeatherIcon = ({color, code, isDay, ...props}) => {\r\n    const hrefToIcon = `${isDay ? day : night}#${code}`;\r\n\r\n    return (\r\n            <svg {...props} style={color} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\r\n                <use href={hrefToIcon}></use>\r\n            </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default WeatherIcon;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport \"../styles/CitiesList.css\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {setCity} from \"../store/weatherReducer/weatherReducer\";\r\nimport WeatherIcon from \"./WeatherIcon\";\r\n\r\nconst CitiesList = (props) => {\r\n    const router = useHistory();\r\n    if (props.cities.length > 0) {\r\n        return (\r\n            <div className='flex cities-list'>\r\n                <div className='blue-line'></div>\r\n                <div className='cities'>\r\n                    {props.cities.map((city) => (\r\n                        <button\r\n                            onClick={() => {\r\n                                router.push(`/SimpleWeather/cities/${city.city}`);\r\n                                props.updateCityInStore(city.city);\r\n                            }}\r\n                            key={city.city}\r\n                            className='cities__btn'\r\n                        >\r\n                            <div>{city.city}</div>\r\n                            <div className='cities__btn-group'>\r\n                                <WeatherIcon className='cities__btn-icon' code={city.code} isDay={city.isDay} color={{fill:'#2D81FF'}}/>\r\n                                <div>{props.tempScale === \"celsius\" ? city.temp_c : city.temp_f}°</div>\r\n                            </div>\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className='flex cities-list'>\r\n                <div className='blue-line'></div>\r\n                <div className='cities-empty'>\r\n                    <p>Oops!</p>\r\n                    <p>You haven't added any city yet!</p>\r\n                </div>\r\n                <div className='blue-line'></div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cities: state.cities.arrOfCities,\r\n    tempScale: state.weatherData.tempScale,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    updateCityInStore: (city) => {\r\n        dispatch(setCity(city));\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesList);\r\n","import React, {useState} from \"react\";\r\nimport {ToggleButton, ToggleButtonGroup} from \"@mui/material\";\r\nimport {connect} from \"react-redux\";\r\nimport {changeTempScale} from \"../store/weatherReducer/weatherReducer\";\r\n\r\nconst TempScaleToggle = (props) => {\r\n    if (!localStorage.getItem('tempScale')) {\r\n        localStorage.setItem('tempScale', 'celsius');\r\n    }\r\n    const [value, setValue] = useState(localStorage.getItem('tempScale'));\r\n    return (\r\n        <ToggleButtonGroup\r\n            color='secondary'\r\n            value={value}\r\n            exclusive\r\n            fullWidth={true}\r\n            sx={{\r\n                '& .MuiToggleButton-root': {\r\n                    backgroundColor: 'transparent',\r\n                    borderColor: '#F9FBFF',\r\n                    color: '#2d81ff',\r\n                    textTransform: 'capitalize',\r\n                    '&.Mui-selected': {\r\n                        backgroundColor: '#6BA6FF',\r\n                        color: '#ffffff',\r\n                    },\r\n                    '&.Mui-selected:hover': {\r\n                        backgroundColor: '#5096ff',\r\n                        color: '#ffffff',\r\n                    }\r\n                },\r\n                height: '24px',\r\n            }}\r\n            onChange={() => {\r\n                if (value === 'celsius') {\r\n                    setValue('fahrenheit')\r\n                    props.changeTempScale('fahrenheit');\r\n                    localStorage.setItem('tempScale', 'fahrenheit')\r\n                } else {\r\n                    setValue('celsius')\r\n                    props.changeTempScale('celsius')\r\n                    localStorage.setItem('tempScale', 'celsius')\r\n                }\r\n            }}\r\n        >\r\n            <ToggleButton value='fahrenheit' sx={{borderRadius: '20px 0 0 20px'}}>\r\n                Fahrenheit\r\n            </ToggleButton>\r\n            <ToggleButton value='celsius' sx={{borderRadius: '0 20px 20px 0'}}>\r\n                Celsius\r\n            </ToggleButton>\r\n        </ToggleButtonGroup>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    tempScale: state.weatherData.tempScale,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    changeTempScale: (value) => {\r\n        dispatch(changeTempScale(value));\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TempScaleToggle);\r\n","import React, {useEffect} from \"react\";\r\nimport \"../styles/CitiesPage.css\";\r\nimport CitiesPageBackButton from \"../components/CitiesPageBackButton\";\r\nimport CitiesList from \"../components/CitiesList\";\r\nimport TempScaleToggle from \"../components/TempScaleToggle\";\r\nimport {connect} from \"react-redux\";\r\nimport {fetchCityTemp} from \"../store/favoriteCitiesReducer/favoriteCitiesReducer\";\r\n\r\nconst CitiesPage = (props) => {\r\n    const fifteenMinutes = 90000;\r\n    const currentDate = Date.now();\r\n\r\n    useEffect(() => {\r\n        props.cities.forEach((obj) => {\r\n            if(currentDate - obj.lastUpdated > fifteenMinutes) {\r\n                props.fetchCityTemp(obj.city)\r\n            }\r\n            localStorage.setItem('cities', JSON.stringify(props.cities));\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div className='app app-outlined cities-page'>\r\n            <CitiesPageBackButton/>\r\n            <div className='cities-page__list'>\r\n                <h1 className='cities-page-header'>Favorite cities</h1>\r\n                <CitiesList/>\r\n            </div>\r\n            <div className='cities-page__settings'>\r\n                <h1 className='cities-page-header'>Settings</h1>\r\n                <TempScaleToggle/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cities: state.cities.arrOfCities\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchCityTemp: (city) => {\r\n        dispatch(fetchCityTemp(city));\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesPage);\r\n","import React from \"react\";\r\nimport {Favorite, FavoriteBorder} from \"@mui/icons-material\";\r\nimport {Checkbox} from \"@mui/material\";\r\n\r\nconst FavoriteButton = (props) => {\r\n    return (\r\n        <Checkbox\r\n            {...props}\r\n            icon={<FavoriteBorder/>}\r\n            checkedIcon={<Favorite/>}\r\n            size='large'\r\n            sx={{\r\n                color: 'white',\r\n                '&.Mui-checked': {\r\n                    color: 'white',\r\n                },\r\n                '&.Mui-disabled': {\r\n                    color: 'transparent',\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default FavoriteButton;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport FavoriteButton from \"./UI/FavoriteButton\";\r\nimport {connect} from \"react-redux\";\r\nimport {addToFavorites, removeFromFavorites} from \"../store/favoriteCitiesReducer/favoriteCitiesReducer\";\r\n\r\nconst FavoriteCityButton = (props) => {\r\n    const [isFavorite, setFavorite] = useState(props.cities.find(obj => obj.city === props.location))\r\n    const [isDisabled, setDisabled] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setFavorite(props.cities.find(obj => obj.city === props.location));\r\n    }, [props.location]);\r\n\r\n    //Make the button inactive if the city is not found\r\n    useEffect(() => {\r\n        if (\r\n            props.location &&\r\n            props.location === props.responseLocation.toLowerCase()\r\n        ) {\r\n            setDisabled(false);\r\n        } else {\r\n            setDisabled(true);\r\n        }\r\n    }, [props.location, props.responseLocation]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('cities', JSON.stringify(props.cities));\r\n    }, [props.cities]);\r\n\r\n    return (\r\n        <FavoriteButton\r\n            onClick={() => {\r\n                if (!isFavorite) {\r\n                    props.addToFavorites({\r\n                        city: props.location,\r\n                        temp_c: props.temp_c,\r\n                        temp_f: props.temp_f,\r\n                        lastUpdated: Date.now(),\r\n                        isDay: props.isDay,\r\n                        code: props.code\r\n                    });\r\n                    setFavorite(!isFavorite);\r\n                } else {\r\n                    props.removeFromFavorites(props.location);\r\n                    setFavorite(!isFavorite);\r\n                }\r\n            }}\r\n            disabled={isDisabled}\r\n            checked={!!isFavorite}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    temp_c: state.weatherData.temp_c,\r\n    temp_f: state.weatherData.temp_f,\r\n    cities: state.cities.arrOfCities,\r\n    isDay: state.weatherData.isDay,\r\n    code: state.weatherData.code,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addToFavorites: (objOfCity) => {\r\n        dispatch(addToFavorites(objOfCity));\r\n    },\r\n    removeFromFavorites: (city) => {\r\n        dispatch(removeFromFavorites(city));\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoriteCityButton);\r\n","import React from \"react\";\r\nimport {IconButton} from \"@mui/material\";\r\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\r\n\r\nconst ListButton = () => {\r\n    return (\r\n        <IconButton size='large' sx={{color: 'white'}}>\r\n            <FormatListBulletedIcon fontSize='large'/>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default ListButton;\r\n","import {useEffect, useState} from 'react';\r\n\r\nfunction useDebounce(value, delay) {\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(\r\n        () => {\r\n            const handler = setTimeout(() => setDebouncedValue(value), delay);\r\n            return () => clearTimeout(handler);\r\n        }, [delay, value],\r\n    );\r\n\r\n    return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;","import React, {useCallback, useEffect} from \"react\";\r\nimport AutosizeInput from \"react-input-autosize\";\r\nimport {connect} from \"react-redux\";\r\nimport \"../styles/CitySearch.css\";\r\nimport {fetchWeather, setCity} from \"../store/weatherReducer/weatherReducer\";\r\nimport store from \"../store/store\";\r\nimport useDebounce from \"../helpers/useDebounce\";\r\n\r\nconst CitySearch = (props) => {\r\n    useEffect(() => {\r\n        if (localStorage.getItem('location') && props.location === '') {\r\n            store.dispatch(setCity(localStorage.getItem('location')));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n            localStorage.setItem('location', props.location);\r\n    }, [props.responseLocation]);\r\n\r\n    const debouncedLocation = useDebounce(props.location.trim(), 700);\r\n\r\n    const memoLoadWeather = useCallback(fetchWeather(debouncedLocation), [debouncedLocation]);\r\n\r\n    useEffect(() => {\r\n        if (debouncedLocation) {\r\n            memoLoadWeather();\r\n        }\r\n    }, [debouncedLocation, memoLoadWeather]);\r\n\r\n    return (\r\n        <div className='search'>\r\n            <h1>Right now in</h1>\r\n            <AutosizeInput\r\n                type='text'\r\n                minWidth='70'\r\n                inputStyle={{fontSize: 35, fontWeight: 600, display: 'block'}}\r\n                value={props.location}\r\n                onChange={(e) => props.onChange(e)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    favoriteCities: state.weatherData.favoriteCities,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onChange: (event) => {\r\n        dispatch(setCity(event.target.value));\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitySearch);\r\n","import React from 'react';\r\nimport {Button} from \"@mui/material\";\r\n\r\nconst OutlinedButton = ({children, ...props}) => {\r\n    return (\r\n        <Button {...props} variant=\"outlined\" fullWidth={true}>{children}</Button>\r\n    );\r\n};\r\n\r\nexport default OutlinedButton;","import React from 'react';\r\nimport OutlinedButton from \"./UI/OutlinedButton\";\r\n\r\nconst ForecastPageButtonLink = ({children, ...props}) => {\r\n    return (\r\n        <OutlinedButton {...props} sx={{\r\n            marginTop: '20px',\r\n            borderRadius: '40px',\r\n            boxShadow: '0px 1px 1px 0px #00000026'\r\n        }}>{children}</OutlinedButton>\r\n    );\r\n};\r\n\r\nexport default ForecastPageButtonLink;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst WeatherTempScale = (props) => {\r\n    if (props.tempScale === 'celsius') {\r\n        return (\r\n            <h1 className='celsius'>\r\n                {props.temp_c}\r\n            </h1>\r\n        )\r\n    } else {\r\n        return (\r\n            <h1 className='fahrenheit'>\r\n                {props.temp_f}\r\n            </h1>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    tempScale: state.weatherData.tempScale,\r\n    temp_c: state.weatherData.temp_c,\r\n    temp_f: state.weatherData.temp_f\r\n})\r\n\r\nexport default connect(mapStateToProps)(WeatherTempScale);","import React from 'react';\r\nimport '../styles/CurrentForecast.css';\r\nimport {connect} from 'react-redux';\r\n\r\nconst WeatherCondition = (props) => {\r\n    return (\r\n        <div className='condition'>it's {props.condition}</div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    condition: state.weatherData.condition,\r\n})\r\n\r\nexport default connect(mapStateToProps)(WeatherCondition);\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport WeatherIcon from './WeatherIcon';\r\nimport '../styles/CurrentForecast.css';\r\nimport WeatherTempScale from \"./WeatherTempScale\";\r\nimport WeatherCondition from \"./WeatherCondition\";\r\n\r\nconst CurrentForecast = (props) => {\r\n    // Conversion from kph to m/s\r\n    const windToMPS = (props.wind * 1000 / 3600).toFixed(1);\r\n    // Conversion from millibars to millimeters of mercury according to the formula\r\n    const pressureToMmOfMercury = (props.pressure * 0.750063755419211).toFixed();\r\n\r\n    return (\r\n        <div>\r\n            <WeatherCondition/>\r\n            <div className='weather grid'>\r\n                <WeatherIcon className='weather__icon' color={{fill: '#fff'}} code={props.code} isDay={props.isDay}/>\r\n                <div className='weather__temp'>\r\n                    <WeatherTempScale className='weather__temp-scale'/>\r\n                </div>\r\n                <div className='flex weather__properties'>\r\n                    <div className='properties__value'>{windToMPS}<span>m/s</span></div>\r\n\r\n                    <div className='properties__value'>{pressureToMmOfMercury}<span>mm Hg</span></div>\r\n                    <div className='properties__value'>{props.humidity}<span>%</span></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n    wind: state.weatherData.wind,\r\n    pressure: state.weatherData.pressure,\r\n    humidity: state.weatherData.humidity,\r\n    code: state.weatherData.code,\r\n    isDay: state.weatherData.isDay\r\n});\r\n\r\nexport default connect(mapStateToProps)(CurrentForecast);\r\n","import React, {useEffect} from 'react';\r\nimport FavoriteCityButton from \"../components/FavoriteCityButton\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport ListButton from \"../components/UI/ListButton\";\r\nimport CitySearch from \"../components/CitySearch\";\r\nimport {useParams} from 'react-router-dom';\r\nimport {connect} from \"react-redux\";\r\nimport ForecastPageButtonLink from \"../components/ForecastPageButtonLink\";\r\nimport CurrentForecast from \"../components/CurrentForecast\";\r\n\r\nconst CityPage = (props) => {\r\n    const params = useParams();\r\n    const router = useHistory();\r\n\r\n    // Redirect to the home page if you start looking for another city\r\n    useEffect(() => {\r\n        if (props.location !== params.city) {\r\n            router.push('/SimpleWeather');\r\n        }\r\n    }, [props.location])\r\n\r\n    return (\r\n        <div>\r\n            <div className='app'>\r\n                <FavoriteCityButton/>\r\n                <Link to='/SimpleWeather/cities' className='app__list-button'>\r\n                    <ListButton/>\r\n                </Link>\r\n                <CitySearch/>\r\n                <CurrentForecast/>\r\n                <Link to='/SimpleWeather/forecast'>\r\n                    <ForecastPageButtonLink>Show me the forecast</ForecastPageButtonLink>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location\r\n})\r\n\r\nexport default connect(mapStateToProps)(CityPage);","import React from 'react';\r\nimport OutlinedButton from \"./UI/OutlinedButton\";\r\n\r\nconst ForecastPageBackButton = ({children, ...props}) => {\r\n    return (\r\n        <OutlinedButton {...props} sx={{\r\n            color: '#2d81ff',\r\n            borderColor: '#2d81ff',\r\n            borderRadius: '40px',\r\n            boxShadow: '0px 1px 1px 0px #00000026',\r\n            '&.MuiButton-root:hover': {\r\n                borderColor: '#08C8F6',\r\n                color: '#08C8F6',\r\n\r\n            }\r\n        }}>{children}</OutlinedButton>\r\n    );\r\n};\r\n\r\nexport default ForecastPageBackButton;","import React, {useRef, useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport SwiperCore, {\r\n    Pagination\r\n} from 'swiper';\r\nimport {Swiper, SwiperSlide} from \"swiper/react/swiper-react\";\r\nimport 'swiper/swiper-bundle.css';\r\nimport 'swiper';\r\nimport '../styles/ForecastSwiper.css';\r\nimport moment from \"moment\";\r\nimport WeatherIcon from \"./WeatherIcon\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst ForecastSwiper = (props) => {\r\n    SwiperCore.use([Pagination]);\r\n    if (props.forecastMod === 'threeDay' && props.threeDayForecast.length) {\r\n        return (\r\n            <Swiper slidesPerView={3} pagination={{\"clickable\": true}}>\r\n                {props.threeDayForecast.map((day) =>\r\n                    <SwiperSlide className='swiper__item'>\r\n                        <h3 className='item__date'>\r\n                            {moment(day.date, 'YYYY-MM-DD').calendar({\r\n                                sameDay: '[Today]',\r\n                                nextDay: '[Tomorrow]',\r\n                                nextWeek: 'dddd',\r\n                            })}\r\n                        </h3>\r\n                        <WeatherIcon className='item__icon' code={day.code} isDay={day.isDay}\r\n                                     color={{fill: '#2D81FF'}}/>\r\n                        <p className='item__temp'>\r\n                            {props.tempScale === 'celsius' ? day.temp_c.toFixed() : day.temp_f.toFixed()}°\r\n                        </p>\r\n                    </SwiperSlide>\r\n                )}\r\n            </Swiper>\r\n        )\r\n    }\r\n    if (props.forecastMod === 'hourly' && props.threeDayForecast.length) {\r\n        const [currentHour, ...restHours] = props.hourlyForecast;\r\n        return (\r\n            <Swiper slidesPerView={4} pagination={{'clickable': true, 'dynamicBullets': true, 'dynamicMainBullets': 3}}>\r\n                <SwiperSlide className='swiper__item'>\r\n                    <h3 className='item__date'>Now</h3>\r\n                    <WeatherIcon className='item__icon' code={currentHour.code} isDay={currentHour.isDay}\r\n                                 color={{fill: '#2D81FF'}}/>\r\n                    <p className='item__temp'>\r\n                        {props.tempScale === 'celsius' ? currentHour.temp_c.toFixed() : currentHour.temp_f.toFixed()}°\r\n                    </p>\r\n                </SwiperSlide>\r\n                {restHours.map((hour) =>\r\n                    <SwiperSlide className={hour.isRain ? 'swiper__item' : 'swiper__item'}>\r\n                        <h3 className='item__date'>\r\n                            {moment(hour.hour, 'YYYY-MM-DD HH').format('HH:mm')}\r\n                        </h3>\r\n                        <WeatherIcon className='item__icon' code={hour.code} isDay={hour.isDay}\r\n                                     color={{fill: '#2D81FF'}}/>\r\n                        <p className='item__temp'>\r\n                            {props.tempScale === 'celsius' ? hour.temp_c.toFixed() : hour.temp_f.toFixed()}°\r\n                        </p>\r\n                    </SwiperSlide>\r\n                )}\r\n            </Swiper>\r\n        )\r\n    } else {\r\n        return (\r\n            <Redirect to='/SimpleWeather'/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    forecastMod: state.weatherData.forecastMod,\r\n    threeDayForecast: state.weatherData.threeDayForecast,\r\n    hourlyForecast: state.weatherData.hourlyForecast,\r\n    tempScale: state.weatherData.tempScale,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ForecastSwiper);","import React, {useState} from 'react';\r\nimport {ToggleButton, ToggleButtonGroup} from \"@mui/material\";\r\nimport {changeForecastMod} from \"../store/weatherReducer/weatherReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport '../styles/ForecastToggle.css'\r\n\r\nconst ForecastToggle = (props) => {\r\n    if (!localStorage.getItem('forecastScale')) {\r\n        localStorage.setItem('forecastScale', 'threeDay');\r\n    }\r\n    const [value, setValue] = useState(localStorage.getItem('forecastScale'));\r\n    return (\r\n        <div className='forecast-toggle-wrapper'>\r\n            <ToggleButtonGroup\r\n                color='secondary'\r\n                value={value}\r\n                exclusive\r\n                sx={{\r\n                    '& .MuiToggleButton-root': {\r\n                        backgroundColor: 'transparent',\r\n                        borderColor: '#F9FBFF',\r\n                        color: '#2d81ff',\r\n                        textTransform: 'capitalize',\r\n                        '&.Mui-selected': {\r\n                            backgroundColor: '#6BA6FF',\r\n                            color: '#ffffff',\r\n                        },\r\n                        '&.Mui-selected:hover': {\r\n                            backgroundColor: '#5096ff',\r\n                            color: '#ffffff',\r\n                        }\r\n                    },\r\n                    height: '24px',\r\n                }}\r\n                fullWidth={true}\r\n                className='forecast-toggle'\r\n                onChange={() => {\r\n                    if (value === 'threeDay') {\r\n                        setValue('hourly')\r\n                        props.changeForecastMod('hourly');\r\n                        localStorage.setItem('forecastScale', 'hourly')\r\n                    } else {\r\n                        setValue('threeDay')\r\n                        props.changeForecastMod('threeDay')\r\n                        localStorage.setItem('forecastScale', 'threeDay')\r\n                    }\r\n                }}\r\n            >\r\n                <ToggleButton value='hourly' sx={{borderRadius: '20px 0 0 20px'}}>\r\n                    Hourly\r\n                </ToggleButton>\r\n                <ToggleButton value='threeDay' sx={{borderRadius: '0 20px 20px 0'}}>\r\n                    Three-day\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    forecastMod: state.weatherData.forecastMod,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    changeForecastMod: (value) => {\r\n        dispatch(changeForecastMod(value));\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForecastToggle);","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport ForecastPageBackButton from \"../components/ForecastPageBackButton\";\r\nimport ForecastSwiper from \"../components/ForecastSwiper\";\r\nimport ForecastToggle from \"../components/ForecastToggle\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst ForecastPage = (props) => {\r\n\r\n    return (\r\n        <div className='app app-outlined'>\r\n            <Link to='/SimpleWeather/'>\r\n                <ForecastPageBackButton>Back to home page</ForecastPageBackButton>\r\n            </Link>\r\n            <h1 style={{fontWeight: 'normal', fontSize: '30px', marginTop: '10px', paddingTop: '5px', borderTop: '1px solid #F9FBFF'}}>{props.location}</h1>\r\n            <h2 style={{fontWeight: 'normal', fontSize: '20px', marginTop: '5px'}}>{props.country}</h2>\r\n            <ForecastSwiper/>\r\n            <ForecastToggle/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst MapStateToProps = (state) => ({\r\n    location: state.weatherData.responseLocation,\r\n    country: state.weatherData.country,\r\n})\r\nexport default connect(MapStateToProps)(ForecastPage);","import React from \"react\";\r\nimport CitySearch from \"../components/CitySearch\";\r\nimport FavoriteCityButton from \"../components/FavoriteCityButton\";\r\nimport ListButton from \"../components/UI/ListButton\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport ForecastPageButtonLink from \"../components/ForecastPageButtonLink\";\r\nimport CurrentForecast from \"../components/CurrentForecast\";\r\n\r\nconst SearchPage = (props) => {\r\n    if (props.responseLocation && props.location === props.responseLocation.toLowerCase()) {\r\n        return (\r\n            <div>\r\n                <div className='app'>\r\n                    <FavoriteCityButton/>\r\n                    <Link to='/SimpleWeather/cities' className='app__list-button'>\r\n                        <ListButton/>\r\n                    </Link>\r\n                    <CitySearch/>\r\n                    <CurrentForecast/>\r\n                    <Link to='/SimpleWeather/forecast'>\r\n                        <ForecastPageButtonLink>Show me the forecast</ForecastPageButtonLink>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n                <div className='app'>\r\n                    <FavoriteCityButton/>\r\n                    <Link to='/SimpleWeather/cities' className='app__list-button'>\r\n                        <ListButton/>\r\n                    </Link>\r\n                    <CitySearch/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    location: state.weatherData.location,\r\n    responseLocation: state.weatherData.responseLocation,\r\n})\r\n\r\nexport default connect(mapStateToProps)(SearchPage);\r\n","import React from 'react';\r\nimport {history} from './historyVar';\r\nimport {Redirect, Route, Router, Switch} from 'react-router-dom';\r\nimport CitiesPage from \"./pages/CitiesPage\";\r\nimport CityPage from \"./pages/CityPage\";\r\nimport ForecastPage from \"./pages/ForecastPage\";\r\nimport SearchPage from \"./pages/SearchPage\";\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router history={history}>\r\n            <Switch>\r\n                <Route exact path='/SimpleWeather'>\r\n                    <SearchPage/>\r\n                </Route>\r\n                <Route exact path='/SimpleWeather/cities'>\r\n                    <CitiesPage/>\r\n                </Route>\r\n                <Route exact path='/SimpleWeather/cities/:city'>\r\n                    <CityPage/>\r\n                </Route>\r\n                <Route exact path='/SimpleWeather/forecast'>\r\n                    <ForecastPage/>\r\n                </Route>\r\n                <Redirect to='/SimpleWeather'/>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux'\r\nimport store from './store/store'\r\nimport App from './App';\r\nimport './index.css';\r\nimport './styles/adaptiveApp.css'\r\nimport {getCitiesFromLocaleStorage} from \"./store/favoriteCitiesReducer/favoriteCitiesReducer\";\r\nimport {createTheme} from \"@mui/material\";\r\nimport {ThemeProvider} from \"@emotion/react\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {changeForecastMod, changeTempScale} from \"./store/weatherReducer/weatherReducer\";\r\n\r\nif (!localStorage.getItem('cities')) {\r\n    localStorage.setItem('cities', '[]');\r\n} else {\r\n    const citiesStr = localStorage.getItem('cities')\r\n    const cities = JSON.parse(citiesStr);\r\n    store.dispatch(getCitiesFromLocaleStorage(cities));\r\n}\r\n\r\nif (localStorage.getItem('tempScale')) {\r\n    store.dispatch(changeTempScale(localStorage.getItem('tempScale')))\r\n}\r\n\r\nif(localStorage.getItem('forecastScale')) {\r\n    store.dispatch(changeForecastMod(localStorage.getItem('forecastScale')))\r\n}\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ffffff',\r\n            darker: '#ffffff'\r\n        },\r\n        secondary: {\r\n            main: '#2d81ff',\r\n            darker: '#2d81ff'\r\n        }\r\n    }\r\n});\r\n\r\n\r\nconst rootElement = document.getElementById('root')\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ThemeProvider theme={theme}>\r\n            <BrowserRouter basename='/SimpleWeather'>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </ThemeProvider>\r\n    </Provider>,\r\n    rootElement\r\n)\r\n"],"sourceRoot":""}